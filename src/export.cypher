CREATE INDEX ON :Client(endDate);
CREATE INDEX ON :Client(location);
CREATE INDEX ON :Client(login);
CREATE INDEX ON :Client(startDate);
CREATE INDEX ON :Client(type);
CREATE CONSTRAINT ON (node:Config) ASSERT (node.brand) IS UNIQUE;
CREATE CONSTRAINT ON (node:Config) ASSERT (node.id) IS UNIQUE;
CREATE CONSTRAINT ON (node:Config) ASSERT (node.store) IS UNIQUE;
CREATE CONSTRAINT ON (node:Client) ASSERT (node.id) IS UNIQUE;
CREATE CONSTRAINT ON (node:`UNIQUE IMPORT LABEL`) ASSERT (node.`UNIQUE IMPORT ID`) IS UNIQUE;
UNWIND [{id:"136_1", properties:{zip:"38119", country:"USA", city:"Memphis", name:"Kristi Kyllonen", location:point({x: -89.84892, y: 35.082936, crs: 'wgs-84'}), state:"TN", login:"c136", type:"Customer", startDate:date('2020-01-31')}}, {id:"72_1", properties:{zip:"99251", country:"USA", city:"Spokane", name:"Ernestina Enoch", location:point({x: -117.431742, y: 47.653568, crs: 'wgs-84'}), state:"WA", type:"Customer", login:"c72", startDate:date('2020-01-15')}}, {id:"87_1", properties:{zip:"63118", country:"USA", city:"Saint Louis", name:"Darnell Doering", location:point({x: -90.2278, y: 38.594901, crs: 'wgs-84'}), state:"MO", type:"Customer", login:"c87", startDate:date('2020-01-30')}}, {id:"141_1", properties:{zip:"39183", country:"USA", city:"Vicksburg", name:"Fallon Fagundes", location:point({x: -90.84485, y: 32.386653, crs: 'wgs-84'}), state:"MS", login:"c141", type:"Customer", startDate:date('2020-01-25')}}, {id:"143_1", properties:{zip:"55772", country:"USA", city:"Nett Lake", name:"Aleshia Amsler", location:point({x: -93.083438, y: 48.081686, crs: 'wgs-84'}), state:"MN", type:"Customer", login:"c143", startDate:date('2020-01-10')}}, {id:"124_1", properties:{zip:"49232", country:"USA", city:"Camden", name:"Raisa Rogue", location:point({x: -84.65993, y: 41.731009, crs: 'wgs-84'}), state:"MI", type:"Customer", login:"c124", startDate:date('2020-01-01')}}, {id:"119_1", properties:{zip:"77071", country:"USA", city:"Houston", name:"Sharee Spina", location:point({x: -95.51718, y: 29.647637, crs: 'wgs-84'}), state:"TX", type:"Customer", login:"c119", startDate:date('2020-01-15')}}, {id:"132_1", properties:{zip:"45103", country:"USA", city:"Batavia", name:"Rey Roloff", location:point({x: -84.15319, y: 39.082894, crs: 'wgs-84'}), state:"OH", type:"Customer", login:"c132", startDate:date('2020-01-06')}}, {id:"96_1", properties:{zip:"93953", country:"USA", city:"Pebble Beach", name:"Rudolf Robuck", location:point({x: -121.9461, y: 36.59081, crs: 'wgs-84'}), state:"CA", type:"Customer", login:"c96", startDate:date('2020-01-13')}}, {id:"88_1", properties:{zip:"54746", country:"USA", city:"Humbird", name:"Cathryn Cascio", location:point({x: -90.89542, y: 44.550251, crs: 'wgs-84'}), state:"WI", type:"Customer", login:"c88", startDate:date('2020-01-16')}}, {id:"77_1", properties:{zip:"6040", country:"USA", city:"Manchester", name:"Len Loar", location:point({x: -72.52384, y: 41.778888, crs: 'wgs-84'}), state:"CT", type:"Customer", login:"c77", startDate:date('2020-01-20')}}, {id:"128_1", properties:{zip:"72053", country:"USA", city:"College Station", name:"Angelia Ahumada", location:point({x: -92.22764, y: 34.708292, crs: 'wgs-84'}), state:"AR", type:"Customer", login:"c128", startDate:date('2020-01-01')}}, {id:"115_1", properties:{zip:"66621", country:"USA", city:"Topeka", name:"Voncile Vanetten", location:point({x: -95.769657, y: 39.042939, crs: 'wgs-84'}), state:"KS", login:"c115", type:"Customer", startDate:date('2020-01-10')}}, {id:"91_1", properties:{zip:"17726", country:"USA", city:"Castanea", name:"Lashanda Loeb", location:point({x: -77.431745, y: 41.122741, crs: 'wgs-84'}), state:"PA", type:"Customer", login:"c91", startDate:date('2020-01-30')}}, {id:"82_1", properties:{zip:"32040", country:"USA", city:"Glen Saint Mary", name:"Geri Garret", location:point({x: -82.21351, y: 30.272356, crs: 'wgs-84'}), state:"FL", type:"Customer", login:"c82", startDate:date('2020-01-17')}}, {id:"149_1", properties:{zip:"32148", country:"USA", city:"Interlachen", name:"Clair Carreira", location:point({x: -81.88648, y: 29.640791, crs: 'wgs-84'}), state:"FL", type:"Customer", login:"c149", startDate:date('2020-01-04')}}, {id:"110_1", properties:{zip:"79058", country:"USA", city:"Masterson", name:"Shawanna Starks", location:point({x: -101.892846, y: 35.837775, crs: 'wgs-84'}), state:"TX", login:"c110", type:"Customer", startDate:date('2020-01-18')}}, {id:"134_1", properties:{zip:"36689", country:"USA", city:"Mobile", name:"Annelle Athey", location:point({x: -88.177975, y: 30.658865, crs: 'wgs-84'}), state:"AL", type:"Customer", login:"c134", startDate:date('2020-01-01')}}, {id:"121_1", properties:{zip:"34869", country:"USA", city:"Tarpon Springs", name:"Mildred Mertes", location:point({x: -82.766173, y: 28.126307, crs: 'wgs-84'}), state:"FL", type:"Customer", login:"c121", startDate:date('2020-01-06')}}, {id:"133_1", properties:{zip:"53706", country:"USA", city:"Madison", name:"Lyman Lade", location:point({x: -89.40774, y: 43.074296, crs: 'wgs-84'}), state:"WI", type:"Customer", login:"c133", startDate:date('2020-01-14')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Customer;
UNWIND [{id:"130_1", properties:{zip:"5544", country:"USA", city:"Andover", name:"Deedee Dave", location:point({x: -71.184202, y: 42.647191, crs: 'wgs-84'}), state:"MA", type:"Customer", login:"c130", startDate:date('2020-01-04')}}, {id:"86_1", properties:{zip:"23822", country:"USA", city:"Ammon", name:"Lenny Lago", location:point({x: -77.647495, y: 37.072361, crs: 'wgs-84'}), state:"VA", type:"Customer", login:"c86", startDate:date('2020-01-05')}}, {id:"94_1", properties:{zip:"14812", country:"USA", city:"Beaver Dams", name:"Mandi Marton", location:point({x: -76.9766, y: 42.286649, crs: 'wgs-84'}), state:"NY", type:"Customer", login:"c94", startDate:date('2020-01-16')}}, {id:"126_1", properties:{zip:"41760", country:"USA", city:"Scuddy", name:"Della Damiano", location:point({x: -83.08055, y: 37.205562, crs: 'wgs-84'}), state:"KY", type:"Customer", login:"c126", startDate:date('2020-01-05')}}, {id:"79_1", properties:{zip:"6705", country:"USA", city:"Waterbury", name:"Alonzo Astin", location:point({x: -72.99861, y: 41.54903, crs: 'wgs-84'}), state:"CT", type:"Customer", login:"c79", startDate:date('2020-01-17')}}, {id:"108_1", properties:{zip:"70836", country:"USA", city:"Baton Rouge", name:"Willis Wakeman", location:point({x: -91.08631, y: 30.388292, crs: 'wgs-84'}), state:"LA", type:"Customer", login:"c108", startDate:date('2020-01-05')}}, {id:"111_1", properties:{zip:"73573", country:"USA", city:"Waurika", name:"Christia Colligan", location:point({x: -97.99784, y: 34.16127, crs: 'wgs-84'}), state:"OK", login:"c111", type:"Customer", startDate:date('2020-01-22')}}, {id:"93_1", properties:{zip:"18916", country:"USA", city:"Danboro", name:"Valene Vannest", location:point({x: -75.10278, y: 40.328645, crs: 'wgs-84'}), state:"PA", type:"Customer", login:"c93", startDate:date('2020-01-17')}}, {id:"92_1", properties:{zip:"56464", country:"USA", city:"Menahga", name:"Margareta Meli", location:point({x: -95.09659, y: 46.770167, crs: 'wgs-84'}), state:"MN", type:"Customer", login:"c92", startDate:date('2020-01-21')}}, {id:"107_1", properties:{zip:"92863", country:"USA", city:"Orange", name:"Aurore Atnip", location:point({x: -117.769442, y: 33.640302, crs: 'wgs-84'}), state:"CA", type:"Customer", login:"c107", startDate:date('2020-01-04')}}, {id:"120_1", properties:{zip:"46063", country:"USA", city:"Orestes", name:"Mitsuko Mcghie", location:point({x: -85.72871, y: 40.27046, crs: 'wgs-84'}), state:"IN", type:"Customer", login:"c120", startDate:date('2020-01-07')}}, {id:"109_1", properties:{zip:"73024", country:"USA", city:"Corn", name:"Marvella Mcfarlin", location:point({x: -98.80897, y: 35.370775, crs: 'wgs-84'}), state:"OK", type:"Customer", login:"c109", startDate:date('2020-01-21')}}, {id:"112_1", properties:{zip:"1330", country:"USA", city:"Ashfield", name:"Mirian Mccaskill", location:point({x: -72.81116, y: 42.521131, crs: 'wgs-84'}), state:"MA", login:"c112", type:"Customer", startDate:date('2020-01-30')}}, {id:"104_1", properties:{zip:"72734", country:"USA", city:"Gentry", name:"Palma Porterfield", location:point({x: -94.46137, y: 36.269478, crs: 'wgs-84'}), state:"AR", login:"c104", type:"Customer", startDate:date('2020-01-12')}}, {id:"116_1", properties:{zip:"95363", country:"USA", city:"Patterson", name:"Alonso Ahart", location:point({x: -121.14555, y: 37.477477, crs: 'wgs-84'}), state:"CA", type:"Customer", login:"c116", startDate:date('2020-01-03')}}, {id:"75_1", properties:{zip:"90081", country:"USA", city:"Los Angeles", name:"Lorrine Lowell", location:point({x: -118.298662, y: 33.786594, crs: 'wgs-84'}), state:"CA", type:"Customer", login:"c75", startDate:date('2020-01-30')}}, {id:"105_1", properties:{zip:"92037", country:"USA", city:"La Jolla", name:"Felisa Foland", location:point({x: -117.26159, y: 32.838761, crs: 'wgs-84'}), state:"CA", type:"Customer", login:"c105", startDate:date('2020-01-09')}}, {id:"99_1", properties:{zip:"68660", country:"USA", city:"Saint Edward", name:"Norbert Nolte", location:point({x: -97.86898, y: 41.574309, crs: 'wgs-84'}), state:"NE", type:"Customer", login:"c99", startDate:date('2020-01-22')}}, {id:"145_1", properties:{zip:"28520", country:"USA", city:"Cedar Island", name:"Kimbra Kral", location:point({x: -76.1988, y: 34.984608, crs: 'wgs-84'}), state:"NC", type:"Customer", login:"c145", startDate:date('2020-01-06')}}, {id:"138_1", properties:{zip:"56557", country:"USA", city:"Mahnomen", name:"Wilhelmina Wolken", location:point({x: -95.87672, y: 47.330624, crs: 'wgs-84'}), state:"MN", login:"c138", type:"Customer", startDate:date('2020-01-25')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Customer;
UNWIND [{id:"118_1", properties:{zip:"44185", country:"USA", city:"Cleveland", name:"Fernando Fremont", location:point({x: -81.672797, y: 41.685744, crs: 'wgs-84'}), state:"OH", login:"c118", type:"Customer", startDate:date('2020-01-04')}}, {id:"122_1", properties:{zip:"35294", country:"USA", city:"Birmingham", name:"Andre Arnett", location:point({x: -86.929208, y: 33.544622, crs: 'wgs-84'}), state:"AL", type:"Customer", login:"c122", startDate:date('2020-01-20')}}, {id:"102_1", properties:{zip:"98125", country:"USA", city:"Seattle", name:"Trula Tobler", location:point({x: -122.30308, y: 47.716648, crs: 'wgs-84'}), state:"WA", type:"Customer", login:"c102", startDate:date('2020-01-28')}}, {id:"135_1", properties:{zip:"37803", country:"USA", city:"Maryville", name:"Darcel Dawe", location:point({x: -83.98412, y: 35.693358, crs: 'wgs-84'}), state:"TN", type:"Customer", login:"c135", startDate:date('2020-01-18')}}, {id:"123_1", properties:{zip:"62943", country:"USA", city:"Grantsburg", name:"Veola Vazquez", location:point({x: -88.73381, y: 37.342538, crs: 'wgs-84'}), state:"IL", type:"Customer", login:"c123", startDate:date('2020-01-08')}}, {id:"71_1", properties:{zip:"30610", country:"USA", city:"Athens", name:"Ilene Isenberg", location:point({x: -83.38908, y: 33.944339, crs: 'wgs-84'}), state:"GA", type:"Customer", login:"c71", startDate:date('2020-01-17')}}, {id:"139_1", properties:{zip:"58048", country:"USA", city:"Hunter", name:"Shavon Strouse", location:point({x: -97.21831, y: 47.198818, crs: 'wgs-84'}), state:"ND", type:"Customer", login:"c139", startDate:date('2020-01-16')}}, {id:"127_1", properties:{zip:"20374", country:"USA", city:"Washington", name:"Bethel Balsley", location:point({x: -77.002197, y: 38.855522, crs: 'wgs-84'}), state:"DC", type:"Customer", login:"c127", startDate:date('2020-01-26')}}, {id:"95_1", properties:{zip:"46780", country:"USA", city:"Pleasant Mills", name:"Breana Beaudoin", location:point({x: -84.937926, y: 40.74532, crs: 'wgs-84'}), state:"IN", type:"Customer", login:"c95", startDate:date('2020-01-27')}}, {id:"125_1", properties:{zip:"17888", country:"USA", city:"Wilburton", name:"Toni Tope", location:point({x: -76.37737, y: 40.818443, crs: 'wgs-84'}), state:"PA", type:"Customer", login:"c125", startDate:date('2020-01-02')}}, {id:"85_1", properties:{zip:"62530", country:"USA", city:"Divernon", name:"Rickey Ryles", location:point({x: -89.65467, y: 39.568077, crs: 'wgs-84'}), state:"IL", type:"Customer", login:"c85", startDate:date('2020-01-29')}}, {id:"140_1", properties:{zip:"58368", country:"USA", city:"Rugby", name:"Barney Brim", location:point({x: -100.00991, y: 48.273263, crs: 'wgs-84'}), state:"ND", type:"Customer", login:"c140", startDate:date('2020-01-07')}}, {id:"12_1", properties:{zip:"13758", country:"USA", city:"East Pharsalia", name:"Sharyn Santini", location:point({x: -75.721931, y: 42.583518, crs: 'wgs-84'}), state:"NY", type:"Customer", login:"c12", startDate:date('2020-01-01')}}, {id:"23_1", properties:{zip:"57055", country:"USA", city:"Renner", name:"Alonzo Alaniz", location:point({x: -96.73032, y: 43.668009, crs: 'wgs-84'}), state:"SD", type:"Customer", login:"c23", startDate:date('2020-01-01')}}, {id:"21_1", properties:{zip:"23071", country:"USA", city:"Hartfield", name:"Wanda Wrinkle", location:point({x: -76.4609, y: 37.533471, crs: 'wgs-84'}), state:"VA", type:"Customer", login:"c21", startDate:date('2020-01-01')}}, {id:"76_1", properties:{zip:"70767", country:"USA", city:"Port Allen", name:"Loretta Linehan", location:point({x: -91.26324, y: 30.473536, crs: 'wgs-84'}), state:"LA", type:"Customer", login:"c76", startDate:date('2020-01-01')}}, {id:"84_1", properties:{zip:"33755", country:"USA", city:"Clearwater", name:"Tami Toppin", location:point({x: -82.78166, y: 27.979114, crs: 'wgs-84'}), state:"FL", type:"Customer", login:"c84", startDate:date('2020-01-20')}}, {id:"81_1", properties:{zip:"83735", country:"USA", city:"Boise", name:"Janay Jonason", location:point({x: -116.243984, y: 43.459855, crs: 'wgs-84'}), state:"ID", type:"Customer", login:"c81", startDate:date('2020-01-30')}}, {id:"97_1", properties:{zip:"48840", country:"USA", city:"Haslett", name:"Tarsha Thibeau", location:point({x: -84.39027, y: 42.760217, crs: 'wgs-84'}), state:"MI", type:"Customer", login:"c97", startDate:date('2020-01-05')}}, {id:"78_1", properties:{zip:"95125", country:"USA", city:"San Jose", name:"Fumiko Fairfield", location:point({x: -121.89649, y: 37.295092, crs: 'wgs-84'}), state:"CA", type:"Customer", login:"c78", startDate:date('2020-01-21')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Customer;
UNWIND [{id:"100_1", properties:{zip:"98004", country:"USA", city:"Bellevue", name:"Jessika Judah", location:point({x: -122.20308, y: 47.618371, crs: 'wgs-84'}), state:"WA", type:"Customer", login:"c100", startDate:date('2020-01-23')}}, {id:"129_1", properties:{zip:"61102", country:"USA", city:"Rockford", name:"Jerrie Jimenes", location:point({x: -89.1297, y: 42.25517, crs: 'wgs-84'}), state:"IL", type:"Customer", login:"c129", startDate:date('2020-01-15')}}, {id:"150_1", properties:{zip:"13562", country:"USA", city:"Hermon", name:"Kyoko Kimbrell", location:point({x: -75.230195, y: 44.465307, crs: 'wgs-84'}), state:"NY", type:"Customer", login:"c150", startDate:date('2020-01-14')}}, {id:"144_1", properties:{zip:"54915", country:"USA", city:"Appleton", name:"Marianne Macaulay", location:point({x: -88.37783, y: 44.244753, crs: 'wgs-84'}), state:"WI", login:"c144", type:"Customer", startDate:date('2020-01-17')}}, {id:"131_1", properties:{zip:"44096", country:"USA", city:"Willoughby", name:"Stasia Stamant", location:point({x: -81.249027, y: 41.910676, crs: 'wgs-84'}), state:"OH", type:"Customer", login:"c131", startDate:date('2020-01-10')}}, {id:"137_1", properties:{zip:"38253", country:"USA", city:"Rives", name:"Ivey Inskeep", location:point({x: -89.0377, y: 36.307957, crs: 'wgs-84'}), state:"TN", type:"Customer", login:"c137", startDate:date('2020-01-26')}}, {id:"142_1", properties:{zip:"41517", country:"USA", city:"Burdine", name:"Tonisha Trumbull", location:point({x: -82.61109, y: 37.184477, crs: 'wgs-84'}), state:"KY", login:"c142", type:"Customer", startDate:date('2020-01-03')}}, {id:"89_1", properties:{zip:"21903", country:"USA", city:"Perryville", name:"Isidra Islas", location:point({x: -76.05077, y: 39.571003, crs: 'wgs-84'}), state:"MD", type:"Customer", login:"c89", startDate:date('2020-01-22')}}, {id:"113_1", properties:{zip:"75035", country:"USA", city:"Frisco", name:"Dustin Darrigo", location:point({x: -96.78177, y: 33.130086, crs: 'wgs-84'}), state:"TX", type:"Customer", login:"c113", startDate:date('2020-01-30')}}, {id:"147_1", properties:{zip:"30320", country:"USA", city:"Atlanta", name:"Fletcher Fiorillo", location:point({x: -84.423648, y: 33.656824, crs: 'wgs-84'}), state:"GA", login:"c147", type:"Customer", startDate:date('2020-01-10')}}, {id:"73_1", properties:{zip:"88545", country:"USA", city:"El Paso", name:"Alexa Abila", location:point({x: -106.299987, y: 31.694842, crs: 'wgs-84'}), state:"TX", type:"Customer", login:"c73", startDate:date('2020-01-01')}}, {id:"146_1", properties:{zip:"30055", country:"USA", city:"Mansfield", name:"Alfonzo Alleman", location:point({x: -83.74735, y: 33.504952, crs: 'wgs-84'}), state:"GA", login:"c146", type:"Customer", startDate:date('2020-01-27')}}, {id:"90_1", properties:{zip:"55706", country:"USA", city:"Babbitt", name:"Ray Ravenell", location:point({x: -91.91856, y: 47.688083, crs: 'wgs-84'}), state:"MN", type:"Customer", login:"c90", startDate:date('2020-01-18')}}, {id:"114_1", properties:{zip:"98274", country:"USA", city:"Mount Vernon", name:"Bettie Bradburn", location:point({x: -122.24432, y: 48.371026, crs: 'wgs-84'}), state:"WA", login:"c114", type:"Customer", startDate:date('2020-01-05')}}, {id:"148_1", properties:{zip:"30553", country:"USA", city:"Lavonia", name:"Josue Judd", location:point({x: -83.09448, y: 34.450501, crs: 'wgs-84'}), state:"GA", type:"Customer", login:"c148", startDate:date('2020-01-21')}}, {id:"98_1", properties:{zip:"95873", country:"USA", city:"Sacramento", name:"Tobi Trieu", location:point({x: -121.444429, y: 38.377411, crs: 'wgs-84'}), state:"CA", type:"Customer", login:"c98", startDate:date('2020-01-23')}}, {id:"103_1", properties:{zip:"63877", country:"USA", city:"Steele", name:"Clarence Chalker", location:point({x: -89.84896, y: 36.079378, crs: 'wgs-84'}), state:"MO", login:"c103", type:"Customer", startDate:date('2020-01-04')}}, {id:"106_1", properties:{zip:"70376", country:"USA", city:"Modeste", name:"Autumn Amore", location:point({x: -90.869481, y: 30.204707, crs: 'wgs-84'}), state:"LA", type:"Customer", login:"c106", startDate:date('2020-01-26')}}, {id:"117_1", properties:{zip:"64111", country:"USA", city:"Kansas City", name:"Harold Hogsett", location:point({x: -94.59439, y: 39.056505, crs: 'wgs-84'}), state:"MO", type:"Customer", login:"c117", startDate:date('2020-01-15')}}, {id:"74_1", properties:{zip:"29372", country:"USA", city:"Pacolet", name:"Veronique Vanasse", location:point({x: -81.74846, y: 34.900682, crs: 'wgs-84'}), state:"SC", type:"Customer", login:"c74", startDate:date('2020-01-16')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Customer;
UNWIND [{id:"101_1", properties:{zip:"59076", country:"USA", city:"Sanders", name:"Jonathon Jacobo", location:point({x: -107.07438, y: 46.2644, crs: 'wgs-84'}), state:"MT", login:"c101", type:"Customer", startDate:date('2020-01-08')}}, {id:"80_1", properties:{zip:"98247", country:"USA", city:"Everson", name:"Janyce Jarrells", location:point({x: -122.32095, y: 48.900256, crs: 'wgs-84'}), state:"WA", type:"Customer", login:"c80", startDate:date('2020-01-20')}}, {id:"83_1", properties:{zip:"40145", country:"USA", city:"Hudson", name:"Dario Derrico", location:point({x: -86.3173, y: 37.652706, crs: 'wgs-84'}), state:"KY", type:"Customer", login:"c83", startDate:date('2020-01-27')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Customer;
UNWIND [{id:"0_1", properties:{zip:"55795", country:"USA", city:"Willow River", name:"Root", location:point({x: -80.253411, y: 40.153565, crs: 'wgs-84'}), state:"MN", login:"c0", type:"Root", startDate:date('2020-01-01')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties;
UNWIND [{id:"16_1", properties:{zip:"7452", country:"USA", city:"Glen Rock", name:"Elina Enfinger", location:point({x: -74.12576, y: 40.961109, crs: 'wgs-84'}), state:"NJ", type:"Ambassador", login:"c16", startDate:date('2020-01-01')}}, {id:"15_1", properties:{zip:"94564", country:"USA", city:"Pinole", name:"Irving Izzard", location:point({x: -122.29208, y: 37.997509, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c15", startDate:date('2020-01-09')}}, {id:"8_1", properties:{zip:"36201", country:"USA", city:"Anniston", name:"Nicole White", location:point({x: -85.85178, y: 33.658803, crs: 'wgs-84'}), state:"AL", type:"Ambassador", login:"c8", startDate:date('2020-01-01')}}, {id:"68_1", properties:{zip:"23040", country:"USA", city:"Cumberland", name:"Quyen Quinones", location:point({x: -78.2553, y: 37.522085, crs: 'wgs-84'}), state:"VA", type:"Ambassador", login:"c68", startDate:date('2020-01-08')}}, {id:"9_1", properties:{zip:"80126", country:"USA", city:"Littleton", name:"Elsy Eckhardt", location:point({x: -104.96808, y: 39.544549, crs: 'wgs-84'}), state:"CO", type:"Ambassador", login:"c9", startDate:date('2020-01-01')}}, {id:"5_1", properties:{zip:"34611", country:"USA", city:"Spring Hill", name:"Kevin Van Gundy", location:point({x: -82.416515, y: 28.564167, crs: 'wgs-84'}), state:"FL", type:"Ambassador", login:"c5", startDate:date('2020-01-01')}}, {id:"66_1", properties:{zip:"22428", country:"USA", city:"Bowling Green", name:"Claudine Carrow", location:point({x: -77.355902, y: 38.014536, crs: 'wgs-84'}), state:"VA", type:"Ambassador", login:"c66", startDate:date('2020-01-18')}}, {id:"56_1", properties:{zip:"5838", country:"USA", city:"East Saint Johnsbury", name:"Katia Kohout", location:point({x: -71.930077, y: 44.468494, crs: 'wgs-84'}), state:"VT", type:"Ambassador", login:"c56", startDate:date('2020-01-14')}}, {id:"38_1", properties:{zip:"71340", country:"USA", city:"Harrisonburg", name:"Claretta Corrales", location:point({x: -91.82382, y: 31.765818, crs: 'wgs-84'}), state:"LA", type:"Ambassador", login:"c38", startDate:date('2020-01-12')}}, {id:"44_1", properties:{zip:"72660", country:"USA", city:"Oak Grove", name:"Pennie Profit", location:point({x: -93.3744, y: 36.492129, crs: 'wgs-84'}), state:"AR", type:"Ambassador", login:"c44", startDate:date('2020-01-15')}}, {id:"34_1", properties:{zip:"65692", country:"USA", city:"Koshkonong", name:"Max Demarzi", location:point({x: -91.64615, y: 36.602467, crs: 'wgs-84'}), state:"MO", type:"Ambassador", login:"c34", startDate:date('2020-01-14')}}, {id:"45_1", properties:{zip:"91605", country:"USA", city:"North Hollywood", name:"Hank Taylor", location:point({x: -118.4011, y: 34.208142, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c45", startDate:date('2020-01-23')}}, {id:"41_1", properties:{zip:"22159", country:"USA", city:"Springfield", name:"Catrice Crays", location:point({x: -77.288755, y: 38.831813, crs: 'wgs-84'}), state:"VA", type:"Ambassador", login:"c41", startDate:date('2020-01-04')}}, {id:"32_1", properties:{zip:"35565", country:"USA", city:"Haleyville", name:"Hans Hornberger", location:point({x: -87.6118, y: 34.225425, crs: 'wgs-84'}), state:"AL", type:"Ambassador", login:"c32", startDate:date('2020-01-04')}}, {id:"42_1", properties:{zip:"72116", country:"USA", city:"North Little Rock", name:"Dina Dreher", location:point({x: -92.24764, y: 34.799541, crs: 'wgs-84'}), state:"AR", type:"Ambassador", login:"c42", startDate:date('2020-01-01')}}, {id:"48_1", properties:{zip:"83861", country:"USA", city:"Saint Maries", name:"Pat Pless", location:point({x: -116.57392, y: 47.274904, crs: 'wgs-84'}), state:"ID", type:"Ambassador", login:"c48", startDate:date('2020-01-01')}}, {id:"63_1", properties:{zip:"37721", country:"USA", city:"Corryton", name:"Adina Ausmus", location:point({x: -83.8066, y: 36.141925, crs: 'wgs-84'}), state:"TN", type:"Ambassador", login:"c63", startDate:date('2020-01-16')}}, {id:"70_1", properties:{zip:"80223", country:"USA", city:"Denver", name:"Jamika Jorden", location:point({x: -104.99999, y: 39.699156, crs: 'wgs-84'}), state:"CO", type:"Ambassador", login:"c70", startDate:date('2020-01-18')}}, {id:"55_1", properties:{zip:"96728", country:"USA", city:"Honomu", name:"Jackeline Jong", location:point({x: -155.12172, y: 19.866007, crs: 'wgs-84'}), state:"HI", type:"Ambassador", login:"c55", startDate:date('2020-01-21')}}, {id:"59_1", properties:{zip:"65790", country:"USA", city:"Pottersville", name:"Trisha Tabron", location:point({x: -92.10602, y: 36.679277, crs: 'wgs-84'}), state:"MO", type:"Ambassador", login:"c59", startDate:date('2020-01-05')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Ambassador;
UNWIND [{id:"61_1", properties:{zip:"34669", country:"USA", city:"Hudson", name:"Raphael Roots", location:point({x: -82.61937, y: 28.348507, crs: 'wgs-84'}), state:"FL", type:"Ambassador", login:"c61", startDate:date('2020-01-16')}}, {id:"57_1", properties:{zip:"50269", country:"USA", city:"Whitten", name:"Lupe Levar", location:point({x: -93.00738, y: 42.261478, crs: 'wgs-84'}), state:"IA", type:"Ambassador", login:"c57", startDate:date('2020-01-16')}}, {id:"53_1", properties:{zip:"99524", country:"USA", city:"Anchorage", name:"Sunshine Stobaugh", location:point({x: -149.440311, y: 61.108864, crs: 'wgs-84'}), state:"AK", type:"Ambassador", login:"c53", startDate:date('2020-01-23')}}, {id:"62_1", properties:{zip:"19516", country:"USA", city:"Centerport", name:"May Michels", location:point({x: -76.00719, y: 40.486726, crs: 'wgs-84'}), state:"PA", type:"Ambassador", login:"c62", startDate:date('2020-01-07')}}, {id:"29_1", properties:{zip:"59911", country:"USA", city:"Bigfork", name:"Niki Neidig", location:point({x: -113.96215, y: 47.952716, crs: 'wgs-84'}), state:"MT", type:"Ambassador", login:"c29", startDate:date('2020-01-01')}}, {id:"60_1", properties:{zip:"15537", country:"USA", city:"Everett", name:"Sabina Shriner", location:point({x: -78.36456, y: 40.003997, crs: 'wgs-84'}), state:"PA", type:"Ambassador", login:"c60", startDate:date('2020-01-30')}}, {id:"36_1", properties:{zip:"76102", country:"USA", city:"Fort Worth", name:"Berta Burchill", location:point({x: -97.32987, y: 32.75388, crs: 'wgs-84'}), state:"TX", type:"Ambassador", login:"c36", startDate:date('2020-01-01')}}, {id:"33_1", properties:{zip:"64843", country:"USA", city:"Goodman", name:"Corrie Calabrese", location:point({x: -94.42691, y: 36.734769, crs: 'wgs-84'}), state:"MO", type:"Ambassador", login:"c33", startDate:date('2020-01-01')}}, {id:"39_1", properties:{zip:"49505", country:"USA", city:"Grand Rapids", name:"Tia Twersky", location:point({x: -85.64785, y: 43.000076, crs: 'wgs-84'}), state:"MI", type:"Ambassador", login:"c39", startDate:date('2020-01-01')}}, {id:"64_1", properties:{zip:"13310", country:"USA", city:"Bouckville", name:"Darci Diggins", location:point({x: -75.5688, y: 42.88821, crs: 'wgs-84'}), state:"NY", type:"Ambassador", login:"c64", startDate:date('2020-01-31')}}, {id:"35_1", properties:{zip:"42759", country:"USA", city:"Marrowbone", name:"Arletha Azevedo", location:point({x: -85.50481, y: 36.824961, crs: 'wgs-84'}), state:"KY", type:"Ambassador", login:"c35", startDate:date('2020-01-01')}}, {id:"58_1", properties:{zip:"27237", country:"USA", city:"Cumnock", name:"Marcel Martir", location:point({x: -79.165314, y: 35.467567, crs: 'wgs-84'}), state:"NC", type:"Ambassador", login:"c58", startDate:date('2020-01-23')}}, {id:"40_1", properties:{zip:"28800", country:"USA", city:"Asheville", name:"Sharell Sollers", location:point({x: -82.597992, y: 35.564734, crs: 'wgs-84'}), state:"NC", type:"Ambassador", login:"c40", startDate:date('2020-01-03')}}, {id:"25_1", properties:{zip:"66758", country:"USA", city:"Neosho Falls", name:"Maud Maclachlan", location:point({x: -95.56976, y: 38.005429, crs: 'wgs-84'}), state:"KS", type:"Ambassador", login:"c25", startDate:date('2020-01-10')}}, {id:"20_1", properties:{zip:"20134", country:"USA", city:"Purcellville", name:"Brianne Buelow", location:point({x: -77.702576, y: 39.152187, crs: 'wgs-84'}), state:"VA", type:"Ambassador", login:"c20", startDate:date('2020-01-05')}}, {id:"46_1", properties:{zip:"91102", country:"USA", city:"Pasadena", name:"Bethanie Bober", location:point({x: -118.298662, y: 33.786594, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c46", startDate:date('2020-01-11')}}, {id:"24_1", properties:{zip:"11757", country:"USA", city:"Lindenhurst", name:"Willy Wickert", location:point({x: -73.37442, y: 40.690049, crs: 'wgs-84'}), state:"NY", type:"Ambassador", login:"c24", startDate:date('2020-01-08')}}, {id:"50_1", properties:{zip:"87527", country:"USA", city:"Dixon", name:"Emmett Eugene", location:point({x: -105.84161, y: 36.1566, crs: 'wgs-84'}), state:"NM", type:"Ambassador", login:"c50", startDate:date('2020-01-16')}}, {id:"22_1", properties:{zip:"56570", country:"USA", city:"Osage", name:"Jeffery Jackman", location:point({x: -95.36174, y: 46.895156, crs: 'wgs-84'}), state:"MN", type:"Ambassador", login:"c22", startDate:date('2020-01-04')}}, {id:"11_1", properties:{zip:"85228", country:"USA", city:"Coolidge", name:"Aliza Albrecht", location:point({x: -111.52617, y: 32.967829, crs: 'wgs-84'}), state:"AZ", type:"Ambassador", login:"c11", startDate:date('2020-01-01')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Ambassador;
UNWIND [{id:"31_1", properties:{zip:"55092", country:"USA", city:"Wyoming", name:"Melynda Mehl", location:point({x: -93.06834, y: 45.329115, crs: 'wgs-84'}), state:"MN", type:"Ambassador", login:"c31", startDate:date('2020-01-20')}}, {id:"10_1", properties:{zip:"48907", country:"USA", city:"Lansing", name:"Loreta Larrimore", location:point({x: -84.838206, y: 42.596071, crs: 'wgs-84'}), state:"MI", type:"Ambassador", login:"c10", startDate:date('2020-01-01')}}, {id:"47_1", properties:{zip:"83537", country:"USA", city:"Kendrick", name:"Barney Brode", location:point({x: -116.54146, y: 46.635799, crs: 'wgs-84'}), state:"ID", type:"Ambassador", login:"c47", startDate:date('2020-01-09')}}, {id:"18_1", properties:{zip:"25044", country:"USA", city:"Clear Creek", name:"Elena Elwood", location:point({x: -81.35066, y: 37.90907, crs: 'wgs-84'}), state:"WV", type:"Ambassador", login:"c18", startDate:date('2020-01-01')}}, {id:"30_1", properties:{zip:"32886", country:"USA", city:"Orlando", name:"Deedra Disandro", location:point({x: -81.260818, y: 28.566338, crs: 'wgs-84'}), state:"FL", type:"Ambassador", login:"c30", startDate:date('2020-01-03')}}, {id:"49_1", properties:{zip:"99523", country:"USA", city:"Anchorage", name:"Anastasia Asberry", location:point({x: -149.440311, y: 61.108864, crs: 'wgs-84'}), state:"AK", type:"Ambassador", login:"c49", startDate:date('2020-01-01')}}, {id:"26_1", properties:{zip:"59318", country:"USA", city:"Brusett", name:"Tarsha Teeter", location:point({x: -107.44215, y: 47.426998, crs: 'wgs-84'}), state:"MT", type:"Ambassador", login:"c26", startDate:date('2020-01-01')}}, {id:"28_1", properties:{zip:"61475", country:"USA", city:"Sciota", name:"Albert Adamczyk", location:point({x: -90.7612, y: 40.581413, crs: 'wgs-84'}), state:"IL", type:"Ambassador", login:"c28", startDate:date('2020-01-01')}}, {id:"43_1", properties:{zip:"25003", country:"USA", city:"Alum Creek", name:"Branda Beauchamp", location:point({x: -81.79045, y: 38.254483, crs: 'wgs-84'}), state:"WV", type:"Ambassador", login:"c43", startDate:date('2020-01-01')}}, {id:"37_1", properties:{zip:"46741", country:"USA", city:"Grabill", name:"Alfred Arcuri", location:point({x: -84.93811, y: 41.202549, crs: 'wgs-84'}), state:"IN", type:"Ambassador", login:"c37", startDate:date('2020-01-01')}}, {id:"27_1", properties:{zip:"68784", country:"USA", city:"Wakefield", name:"Maureen Morrissey", location:point({x: -96.87191, y: 42.242742, crs: 'wgs-84'}), state:"NE", type:"Ambassador", login:"c27", startDate:date('2020-01-01')}}, {id:"17_1", properties:{zip:"89409", country:"USA", city:"Gabbs", name:"Max Moschella", location:point({x: -117.78194, y: 38.872139, crs: 'wgs-84'}), state:"NV", type:"Ambassador", login:"c17", startDate:date('2020-01-27')}}, {id:"6_1", properties:{zip:"95717", country:"USA", city:"Gold Run", name:"Michael Hunger", location:point({x: -120.8451, y: 39.177026, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c6", startDate:date('2020-01-03')}}, {id:"19_1", properties:{zip:"78789", country:"USA", city:"Austin", name:"Jeanmarie Jaffe", location:point({x: -97.771258, y: 30.326374, crs: 'wgs-84'}), state:"TX", type:"Ambassador", login:"c19", startDate:date('2020-01-29')}}, {id:"7_1", properties:{zip:"98849", country:"USA", city:"Riverside", name:"Bryce Merkl Sasaki", location:point({x: -119.45276, y: 48.528793, crs: 'wgs-84'}), state:"WA", type:"Ambassador", login:"c7", startDate:date('2020-01-11')}}, {id:"14_1", properties:{zip:"5448", country:"USA", city:"East Fairfield", name:"Kristofer Kirshner", location:point({x: -72.88247, y: 44.751801, crs: 'wgs-84'}), state:"VT", type:"Ambassador", login:"c14", startDate:date('2020-01-23')}}, {id:"3_1", properties:{zip:"31503", country:"USA", city:"Waycross", name:"Inger Ikner", location:point({x: -82.37534, y: 31.205194, crs: 'wgs-84'}), state:"GA", type:"Ambassador", login:"c3", startDate:date('2020-01-29')}}, {id:"39_1", properties:{zip:"49505", country:"USA", city:"Grand Rapids", name:"Tia Twersky", location:point({x: -85.64785, y: 43.000076, crs: 'wgs-84'}), state:"MI", type:"Ambassador", login:"c39", startDate:date('2020-01-01')}}, {id:"1_1", properties:{zip:"45388", country:"USA", city:"Yorkshire", name:"Wilber Woodson", location:point({x: -84.47938, y: 40.328535, crs: 'wgs-84'}), state:"OH", type:"Ambassador", login:"c1", startDate:date('2020-01-15')}}, {id:"40_1", properties:{zip:"28800", country:"USA", city:"Asheville", name:"Sharell Sollers", location:point({x: -82.597992, y: 35.564734, crs: 'wgs-84'}), state:"NC", type:"Ambassador", login:"c40", startDate:date('2020-01-03')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Ambassador;
UNWIND [{id:"4_1", properties:{zip:"45833", country:"USA", city:"Delphos", name:"Greta Workman", location:point({x: -84.34178, y: 40.841409, crs: 'wgs-84'}), state:"OH", type:"Ambassador", login:"c4", startDate:date('2020-01-01')}}, {id:"41_1", properties:{zip:"22159", country:"USA", city:"Springfield", name:"Catrice Crays", location:point({x: -77.288755, y: 38.831813, crs: 'wgs-84'}), state:"VA", type:"Ambassador", login:"c41", startDate:date('2020-01-04')}}, {id:"2_1", properties:{zip:"39483", country:"USA", city:"Foxworth", name:"Rosaria Rock", location:point({x: -89.90761, y: 31.218509, crs: 'wgs-84'}), state:"MS", type:"Ambassador", login:"c2", startDate:date('2020-01-04')}}, {id:"42_1", properties:{zip:"72116", country:"USA", city:"North Little Rock", name:"Dina Dreher", location:point({x: -92.24764, y: 34.799541, crs: 'wgs-84'}), state:"AR", type:"Ambassador", login:"c42", startDate:date('2020-01-01')}}, {id:"13_1", properties:{zip:"76061", country:"USA", city:"Lillian", name:"Eugenie Elling", location:point({x: -97.16347, y: 32.502674, crs: 'wgs-84'}), state:"TX", type:"Ambassador", login:"c13", startDate:date('2020-01-16')}}, {id:"43_1", properties:{zip:"25003", country:"USA", city:"Alum Creek", name:"Branda Beauchamp", location:point({x: -81.79045, y: 38.254483, crs: 'wgs-84'}), state:"WV", type:"Ambassador", login:"c43", startDate:date('2020-01-01')}}, {id:"34_1", properties:{zip:"65692", country:"USA", city:"Koshkonong", name:"Max Demarzi", location:point({x: -91.64615, y: 36.602467, crs: 'wgs-84'}), state:"MO", type:"Ambassador", login:"c34", startDate:date('2020-01-14')}}, {id:"44_1", properties:{zip:"72660", country:"USA", city:"Oak Grove", name:"Pennie Profit", location:point({x: -93.3744, y: 36.492129, crs: 'wgs-84'}), state:"AR", type:"Ambassador", login:"c44", startDate:date('2020-01-15')}}, {id:"35_1", properties:{zip:"42759", country:"USA", city:"Marrowbone", name:"Arletha Azevedo", location:point({x: -85.50481, y: 36.824961, crs: 'wgs-84'}), state:"KY", type:"Ambassador", login:"c35", startDate:date('2020-01-01')}}, {id:"45_1", properties:{zip:"91605", country:"USA", city:"North Hollywood", name:"Hank Taylor", location:point({x: -118.4011, y: 34.208142, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c45", startDate:date('2020-01-23')}}, {id:"36_1", properties:{zip:"76102", country:"USA", city:"Fort Worth", name:"Berta Burchill", location:point({x: -97.32987, y: 32.75388, crs: 'wgs-84'}), state:"TX", type:"Ambassador", login:"c36", startDate:date('2020-01-01')}}, {id:"46_1", properties:{zip:"91102", country:"USA", city:"Pasadena", name:"Bethanie Bober", location:point({x: -118.298662, y: 33.786594, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c46", startDate:date('2020-01-11')}}, {id:"37_1", properties:{zip:"46741", country:"USA", city:"Grabill", name:"Alfred Arcuri", location:point({x: -84.93811, y: 41.202549, crs: 'wgs-84'}), state:"IN", type:"Ambassador", login:"c37", startDate:date('2020-01-01')}}, {id:"47_1", properties:{zip:"83537", country:"USA", city:"Kendrick", name:"Barney Brode", location:point({x: -116.54146, y: 46.635799, crs: 'wgs-84'}), state:"ID", type:"Ambassador", login:"c47", startDate:date('2020-01-09')}}, {id:"28_1", properties:{zip:"61475", country:"USA", city:"Sciota", name:"Albert Adamczyk", location:point({x: -90.7612, y: 40.581413, crs: 'wgs-84'}), state:"IL", type:"Ambassador", login:"c28", startDate:date('2020-01-01')}}, {id:"38_1", properties:{zip:"71340", country:"USA", city:"Harrisonburg", name:"Claretta Corrales", location:point({x: -91.82382, y: 31.765818, crs: 'wgs-84'}), state:"LA", type:"Ambassador", login:"c38", startDate:date('2020-01-12')}}, {id:"48_1", properties:{zip:"83861", country:"USA", city:"Saint Maries", name:"Pat Pless", location:point({x: -116.57392, y: 47.274904, crs: 'wgs-84'}), state:"ID", type:"Ambassador", login:"c48", startDate:date('2020-01-01')}}, {id:"29_1", properties:{zip:"59911", country:"USA", city:"Bigfork", name:"Niki Neidig", location:point({x: -113.96215, y: 47.952716, crs: 'wgs-84'}), state:"MT", type:"Ambassador", login:"c29", startDate:date('2020-01-01')}}, {id:"30_1", properties:{zip:"32886", country:"USA", city:"Orlando", name:"Deedra Disandro", location:point({x: -81.260818, y: 28.566338, crs: 'wgs-84'}), state:"FL", type:"Ambassador", login:"c30", startDate:date('2020-01-03')}}, {id:"32_1", properties:{zip:"35565", country:"USA", city:"Haleyville", name:"Hans Hornberger", location:point({x: -87.6118, y: 34.225425, crs: 'wgs-84'}), state:"AL", type:"Ambassador", login:"c32", startDate:date('2020-01-04')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Ambassador;
UNWIND [{id:"65_1", properties:{zip:"38308", country:"USA", city:"Jackson", name:"Carri Colas", location:point({x: -88.841225, y: 35.612405, crs: 'wgs-84'}), state:"TN", type:"Ambassador", login:"c65", startDate:date('2020-01-13')}}, {id:"33_1", properties:{zip:"64843", country:"USA", city:"Goodman", name:"Corrie Calabrese", location:point({x: -94.42691, y: 36.734769, crs: 'wgs-84'}), state:"MO", type:"Ambassador", login:"c33", startDate:date('2020-01-01')}}, {id:"51_1", properties:{zip:"6807", country:"USA", city:"Cos Cob", name:"Vicky Vivian", location:point({x: -73.59508, y: 41.047627, crs: 'wgs-84'}), state:"CT", type:"Ambassador", login:"c51", startDate:date('2020-01-30')}}, {id:"69_1", properties:{zip:"23345", country:"USA", city:"Davis Wharf", name:"Basilia Bobadilla", location:point({x: -75.701449, y: 37.738248, crs: 'wgs-84'}), state:"VA", type:"Ambassador", login:"c69", startDate:date('2020-01-26')}}, {id:"2_1", properties:{zip:"39483", country:"USA", city:"Foxworth", name:"Rosaria Rock", location:point({x: -89.90761, y: 31.218509, crs: 'wgs-84'}), state:"MS", type:"Ambassador", login:"c2", startDate:date('2020-01-04')}}, {id:"3_1", properties:{zip:"31503", country:"USA", city:"Waycross", name:"Inger Ikner", location:point({x: -82.37534, y: 31.205194, crs: 'wgs-84'}), state:"GA", type:"Ambassador", login:"c3", startDate:date('2020-01-29')}}, {id:"4_1", properties:{zip:"45833", country:"USA", city:"Delphos", name:"Greta Workman", location:point({x: -84.34178, y: 40.841409, crs: 'wgs-84'}), state:"OH", type:"Ambassador", login:"c4", startDate:date('2020-01-01')}}, {id:"5_1", properties:{zip:"34611", country:"USA", city:"Spring Hill", name:"Kevin Van Gundy", location:point({x: -82.416515, y: 28.564167, crs: 'wgs-84'}), state:"FL", type:"Ambassador", login:"c5", startDate:date('2020-01-01')}}, {id:"6_1", properties:{zip:"95717", country:"USA", city:"Gold Run", name:"Michael Hunger", location:point({x: -120.8451, y: 39.177026, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c6", startDate:date('2020-01-03')}}, {id:"8_1", properties:{zip:"36201", country:"USA", city:"Anniston", name:"Nicole White", location:point({x: -85.85178, y: 33.658803, crs: 'wgs-84'}), state:"AL", type:"Ambassador", login:"c8", startDate:date('2020-01-01')}}, {id:"67_1", properties:{zip:"74034", country:"USA", city:"Hallett", name:"Casimira Clyburn", location:point({x: -96.56882, y: 36.232452, crs: 'wgs-84'}), state:"OK", type:"Ambassador", login:"c67", startDate:date('2020-01-26')}}, {id:"52_1", properties:{zip:"95019", country:"USA", city:"Freedom", name:"Zoe Zenz", location:point({x: -121.77972, y: 36.935552, crs: 'wgs-84'}), state:"CA", type:"Ambassador", login:"c52", startDate:date('2020-01-17')}}, {id:"1_1", properties:{zip:"45388", country:"USA", city:"Yorkshire", name:"Wilber Woodson", location:point({x: -84.47938, y: 40.328535, crs: 'wgs-84'}), state:"OH", type:"Ambassador", login:"c1", startDate:date('2020-01-15')}}, {id:"16_1", properties:{zip:"7452", country:"USA", city:"Glen Rock", name:"Elina Enfinger", location:point({x: -74.12576, y: 40.961109, crs: 'wgs-84'}), state:"NJ", type:"Ambassador", login:"c16", startDate:date('2020-01-01')}}, {id:"17_1", properties:{zip:"89409", country:"USA", city:"Gabbs", name:"Max Moschella", location:point({x: -117.78194, y: 38.872139, crs: 'wgs-84'}), state:"NV", type:"Ambassador", login:"c17", startDate:date('2020-01-27')}}, {id:"18_1", properties:{zip:"25044", country:"USA", city:"Clear Creek", name:"Elena Elwood", location:point({x: -81.35066, y: 37.90907, crs: 'wgs-84'}), state:"WV", type:"Ambassador", login:"c18", startDate:date('2020-01-01')}}, {id:"19_1", properties:{zip:"78789", country:"USA", city:"Austin", name:"Jeanmarie Jaffe", location:point({x: -97.771258, y: 30.326374, crs: 'wgs-84'}), state:"TX", type:"Ambassador", login:"c19", startDate:date('2020-01-29')}}, {id:"26_1", properties:{zip:"59318", country:"USA", city:"Brusett", name:"Tarsha Teeter", location:point({x: -107.44215, y: 47.426998, crs: 'wgs-84'}), state:"MT", type:"Ambassador", login:"c26", startDate:date('2020-01-01')}}, {id:"27_1", properties:{zip:"68784", country:"USA", city:"Wakefield", name:"Maureen Morrissey", location:point({x: -96.87191, y: 42.242742, crs: 'wgs-84'}), state:"NE", type:"Ambassador", login:"c27", startDate:date('2020-01-01')}}, {id:"9_1", properties:{zip:"80126", country:"USA", city:"Littleton", name:"Elsy Eckhardt", location:point({x: -104.96808, y: 39.544549, crs: 'wgs-84'}), state:"CO", type:"Ambassador", login:"c9", startDate:date('2020-01-01')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Ambassador;
UNWIND [{id:"10_1", properties:{zip:"48907", country:"USA", city:"Lansing", name:"Loreta Larrimore", location:point({x: -84.838206, y: 42.596071, crs: 'wgs-84'}), state:"MI", type:"Ambassador", login:"c10", startDate:date('2020-01-01')}}, {id:"11_1", properties:{zip:"85228", country:"USA", city:"Coolidge", name:"Aliza Albrecht", location:point({x: -111.52617, y: 32.967829, crs: 'wgs-84'}), state:"AZ", type:"Ambassador", login:"c11", startDate:date('2020-01-01')}}, {id:"13_1", properties:{zip:"76061", country:"USA", city:"Lillian", name:"Eugenie Elling", location:point({x: -97.16347, y: 32.502674, crs: 'wgs-84'}), state:"TX", type:"Ambassador", login:"c13", startDate:date('2020-01-16')}}, {id:"14_1", properties:{zip:"5448", country:"USA", city:"East Fairfield", name:"Kristofer Kirshner", location:point({x: -72.88247, y: 44.751801, crs: 'wgs-84'}), state:"VT", type:"Ambassador", login:"c14", startDate:date('2020-01-23')}}, {id:"54_1", properties:{zip:"4779", country:"USA", city:"Sinclair", name:"Kemberly Knisley", location:point({x: -68.27288, y: 47.165256, crs: 'wgs-84'}), state:"ME", type:"Ambassador", login:"c54", startDate:date('2020-01-23')}}] AS row
MERGE (n:Client{id: row.id}) SET n += row.properties SET n:Ambassador;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{brand:"ACME", properties:{`rule.pcv`:"WITH ('OrderCV0' + $client.type) AS key RETURN round(COALESCE($volume[key],0.0),2)", `ranking.promotion-period.type`:"Month", `ranking.promotion-period.5`:1000000000, `ranking.promotion-period.3`:4, `ranking.promotion-period.4`:5, `ranking.promotion-period.1`:3, `ranking.promotion-period.2`:3, `cap.commission.period`:"Month", `ranking.ids`:[1, 2, 3, 4, 5], `rule.ranking`:"WITH $config AS config, $ranking AS ranking\nWITH config, apoc.cypher.runFirstColumnSingle(config['rule.gqv'],{volume:$volume}) AS gqv,\n      apoc.cypher.runFirstColumnSingle(config['rule.pqv'],{volume:$volume, client:$client}) AS pqv, ranking\nWITH config, pqv, gqv, ranking, CASE WHEN pqv >= config['ranking.min-pqv.' + ranking.seq] AND gqv >= config['ranking.min-gqv.'+ ranking.seq] THEN TRUE ELSE FALSE END AS volumesAchieved\n// if volumes are not achieved, reset counter on next ranking\nWITH config, pqv, gqv, ranking, CASE WHEN volumesAchieved THEN (1 + ranking.counter % config['ranking.promotion-period.'+ranking.seq]) ELSE 1 END AS updatedCounter\nWITH config, pqv, gqv, ranking, updatedCounter, \nCASE WHEN ranking.counter=config['ranking.promotion-period.'+ranking.seq] THEN (CASE WHEN ranking.seq < SIZE(config['ranking.ids']) THEN ranking.seq+1 ELSE ranking.seq END) ELSE ranking.seq END AS updatedSeq\n//,apoc.convert.toJson({seq: ranking.seq, counter: ranking.counter, pqv: pqv, gqv: gqv}) AS log\nRETURN  apoc.create.vNode(['Ranking'],{counter: updatedCounter, seq: updatedSeq})", `rule.clientCommissionContribution`:"\nWITH $volume AS volume, $client AS client, $config AS config, $typeLevel AS typeLevel\nRETURN round(apoc.cypher.runFirstColumnSingle(config['rule.pcv'],{volume:volume, client:client})* config['commission.level-multiplier.'+ typeLevel],2)", id:"1", `commission.level-multiplier.2Ambassador`:0.1, `ranking.team-bonus-multiplier.1`:0.0, `rule.teamBonus`:"WITH apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:$volume}) AS gqv,\n     apoc.cypher.runFirstColumnSingle($config['rule.pqv'], {client:$client,volume:$volume}) AS pqv\nWITH $period AS period, $client AS client, pqv, gqv     \nOPTIONAL MATCH (period)<-[:NEXT]-(previousPeriod:Period)\nWITH client, period, previousPeriod, pqv, gqv\nOPTIONAL MATCH (client)-[:HAS_VOLUME]->(previousVolume:Volume)-[:VOLUME_FOR_PERIOD]->(previousPeriod)\nWITH period, previousPeriod, pqv, gqv, COALESCE(apoc.cypher.runFirstColumnSingle($config['rule.gqv'],{volume:previousVolume}),0.0) AS previousGqv\nWITH period, previousPeriod, pqv, gqv, previousGqv, CASE WHEN (pqv >= $config['ranking.min-pqv.' + $ranking.seq] AND (gqv - previousGqv > 0)) THEN gqv - previousGqv ELSE 0 END AS gqvDiff\nWITH period, previousPeriod, pqv, gqv, previousGqv, round(gqvDiff * COALESCE($config['ranking.team-bonus-multiplier.' + $ranking.seq],0.0), 2) AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], pqv: pqv, previousGqv: previousGqv, gqv: gqv}) AS source\nRETURN  apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'teamBonus', value: value, source:source})", `cap.commission.2Ambassador`:50, `commission.level-multiplier.2Customer`:0.1, `ranking.team-bonus-multiplier.2`:0.0, `ranking.team-bonus-multiplier.5`:0.05, `api.data.period`:"WITH $period AS period RETURN period{.id, .name}", typeLevels:["0Ambassador", "0Customer", "1Ambassador", "1Customer", "2Ambassador", "2Customer"], `ranking.team-bonus-multiplier.3`:0.01, `ranking.team-bonus-multiplier.4`:0.02, `commission.level-multiplier.0Customer`:0, `cap.commission.1Customer`:50, `rule.gqv`:"RETURN round(COALESCE($volume.OrderQV0Ambassador,0.0)+COALESCE($volume.OrderQV1Ambassador,0.0)+COALESCE($volume.OrderQV1Customer,0.0)+\n COALESCE($volume.OrderQV2Ambassador,0.0)+COALESCE($volume.OrderQV2Customer,0.0)\n-(COALESCE($volume.ReturnQV0Ambassador,0.0)+COALESCE($volume.ReturnQV1Ambassador,0.0)+COALESCE($volume.ReturnQV1Customer,0.0)+\n  COALESCE($volume.ReturnQV2Ambassador,0.0)+COALESCE($volume.ReturnQV2Customer,0.0)),2)", `rule.volumeStats`:"WITH $volume AS volume, $client AS client, $config AS config, $volumeType AS volumeType\n WITH apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client}) AS total, volume['OrderCount0' + client.type] AS count\n RETURN apoc.map.fromPairs([\n    ['total', total],\n    ['count', count],\n    ['avg', round(total/count,2)]\n   ]\n )", `ranking.2`:"Attache Ambassador", `ranking.promotion-bonus.4`:10000, `ranking.3`:"Manager Ambassador", `ranking.promotion-bonus.3`:3000, `ranking.promotion-bonus.2`:1500, `ranking.1`:"Ambassador", `ranking.promotion-bonus.1`:0, `ranking.4`:"Regent Ambassador", `ranking.5`:"Executive Ambassador", `ranking.promotion-bonus.5`:25000, `rule.clientVolumeContribution`:"WITH $volume AS volume, $config AS config, $volumeType AS volumeType, $client AS client\nRETURN apoc.cypher.runFirstColumnSingle(config['rule.p' + volumeType],{volume:volume, client:client})", `cap.commission.1Ambassador`:50, `api.data.config`:"WITH $config AS config RETURN config{.brand, .store, .currency}", `commission.level-multiplier.0Ambassador`:0.25, `rule.pqv`:"RETURN round(COALESCE($volume['OrderQV0'+ $client.type],0.0)-COALESCE($volume['ReturnQV0' + $client.type],0.0),2)", `ranking.min-gqv.1`:5000, `rule.gcv`:"RETURN round(COALESCE($volume.OrderCV0Ambassador,0.0)+COALESCE($volume.OrderCV1Ambassador,0.0)+COALESCE($volume.OrderCV1Customer,0.0)+\n COALESCE($volume.OrderCV2Ambassador,0.0)+COALESCE($volume.OrderCV2Customer,0.0),2)", `ranking.min-gqv.2`:10000, `ranking.min-gqv.3`:25000, currency:"$", `cap.commission.0Customer`:50, `ranking.min-gqv.4`:50000, `ranking.min-pqv.3`:150, `ranking.min-gqv.5`:0, `ranking.min-pqv.2`:150, `rule.promotionBonus`:"WITH $period AS period\nMATCH (period)-[:NEXT]->(nextPeriod:Period)\nWITH nextPeriod, $client AS client\nMATCH (client)-[:HAS_RANKING]->(nextRanking:Ranking)-[:RANKING_FOR_PERIOD]->(nextPeriod)\nWITH nextRanking, CASE WHEN $ranking.seq < nextRanking.seq THEN COALESCE($config['ranking.promotion-bonus.' + nextRanking.seq],0.0) ELSE 0.0 END AS value,\napoc.convert.toJson({ranking: $config['ranking.' + $ranking.seq], nextRanking: $config['ranking.' + nextRanking.seq]}) AS source\nRETURN apoc.create.vNode(['Earning', 'Bonus'],{type: 'Bonus', category: 'promotionBonus', value: value, source: source})", `ranking.min-pqv.1`:150, `commission.level-multiplier.1Customer`:0.25, `ranking.min-pqv.5`:150, `rule.typeLevelSalesCommission`:"WITH $period AS period, $config AS config \nMATCH (pp:Period) WHERE pp.type = config['cap.commission.period'] AND (period.startDate>=pp.startDate AND period.endDate<=pp.endDate)\nWITH pp, config, $volume AS volume, $client AS client\nOPTIONAL MATCH (client)-[:EARNED]->(commission:Commission)-[:EARNING_FOR_PERIOD]->(p:Period) WHERE (p)-[:IN_PERIOD]->(pp)\nWITH config, volume, config['cap.commission.0Ambassador'] AS cap, COALESCE(sum(commission.C0Ambassador),0.0) AS totalPersonalCommission\nWITH config, volume, CASE WHEN (cap-totalPersonalCommission>0) THEN cap-totalPersonalCommission ELSE 0 END AS allowance, cap, totalPersonalCommission, \n                COALESCE(volume.OrderCV0Ambassador, 0.0)*config['commission.level-multiplier.0Ambassador'] AS C0AmbassadorOrig\nWITH config, volume, C0AmbassadorOrig, allowance, apoc.coll.min([C0AmbassadorOrig, allowance]) AS C0Ambassador,\n     COALESCE(volume.OrderCV1Ambassador, 0.0)*config['commission.level-multiplier.1Ambassador'] AS C1Ambassador,\n     COALESCE(volume.OrderCV1Customer, 0.0)*config['commission.level-multiplier.1Customer'] AS C1Customer,\n     COALESCE(volume.OrderCV2Ambassador, 0.0)*config['commission.level-multiplier.2Ambassador'] AS C2Ambassador,\n     COALESCE(volume.OrderCV2Customer,0.0)*config['commission.level-multiplier.2Customer'] AS C2Customer\nRETURN {source: apoc.convert.toJson({C0Ambassador: round(C0Ambassador,2), C1Ambassador:round(C1Ambassador,2), C1Customer: round(C1Customer,2),  \n        C2Ambassador: round(C2Ambassador,2), C2Customer: round(C2Customer,2)}), \n        value: round((C0Ambassador + C1Ambassador + C1Customer + C2Ambassador + C2Customer),2),\n        type: 'Commission',\n        category: 'typeLevelSalesCommission',\n        residual: CASE WHEN (C0AmbassadorOrig-allowance > 0) THEN round(C0AmbassadorOrig-allowance,2) ELSE 0.0 END }", `ranking.min-pqv.4`:150, store:"www.acme.com", `cap.commission.2Customer`:50, `cap.commission.0Ambassador`:50, `ranking.eligible-client-types`:["Ambassador"], `downline.depth`:2, dataImportUrl:"https://raw.githubusercontent.com/magaton/slashco-mlm/master", `rule.volumeSourceCommissionContribution`:"WITH $volumeSource AS volumeSource, $typeLevel AS typeLevel, $config AS config\nRETURN round(volumeSource.cv * config['commission.level-multiplier.'+ typeLevel],2)", `commission.level-multiplier.1Ambassador`:0.1, `api.data.client`:"WITH $client AS client RETURN client{.id, .name, .login}"}}] AS row
MERGE (n:Config{brand: row.brand}) SET n += row.properties;
UNWIND [{start: {id:"108_1"}, end: {id:"36_1"}, properties:{startDate:date('2020-01-05')}}, {start: {id:"148_1"}, end: {id:"47_1"}, properties:{startDate:date('2020-01-21')}}, {start: {id:"109_1"}, end: {id:"29_1"}, properties:{startDate:date('2020-01-21')}}, {start: {id:"21_1"}, end: {id:"11_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"149_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"110_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-18')}}, {start: {id:"150_1"}, end: {id:"46_1"}, properties:{startDate:date('2020-01-14')}}, {start: {id:"111_1"}, end: {id:"36_1"}, properties:{startDate:date('2020-01-22')}}, {start: {id:"23_1"}, end: {id:"11_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"140_1"}, end: {id:"39_1"}, properties:{startDate:date('2020-01-07')}}, {start: {id:"112_1"}, end: {id:"35_1"}, properties:{startDate:date('2020-01-30')}}, {start: {id:"141_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-25')}}, {start: {id:"113_1"}, end: {id:"46_1"}, properties:{startDate:date('2020-01-30')}}, {start: {id:"142_1"}, end: {id:"43_1"}, properties:{startDate:date('2020-01-03')}}, {start: {id:"114_1"}, end: {id:"43_1"}, properties:{startDate:date('2020-01-05')}}, {start: {id:"143_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-10')}}, {start: {id:"115_1"}, end: {id:"37_1"}, properties:{startDate:date('2020-01-10')}}, {start: {id:"144_1"}, end: {id:"44_1"}, properties:{startDate:date('2020-01-17')}}, {start: {id:"100_1"}, end: {id:"46_1"}, properties:{startDate:date('2020-01-23')}}, {start: {id:"145_1"}, end: {id:"42_1"}, properties:{startDate:date('2020-01-06')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"146_1"}, end: {id:"43_1"}, properties:{startDate:date('2020-01-27')}}, {start: {id:"147_1"}, end: {id:"43_1"}, properties:{startDate:date('2020-01-10')}}, {start: {id:"132_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-06')}}, {start: {id:"133_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-14')}}, {start: {id:"134_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"135_1"}, end: {id:"34_1"}, properties:{startDate:date('2020-01-18')}}, {start: {id:"136_1"}, end: {id:"27_1"}, properties:{startDate:date('2020-01-31')}}, {start: {id:"137_1"}, end: {id:"46_1"}, properties:{startDate:date('2020-01-26')}}, {start: {id:"12_1"}, end: {id:"4_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"138_1"}, end: {id:"32_1"}, properties:{startDate:date('2020-01-25')}}, {start: {id:"139_1"}, end: {id:"39_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"84_1"}, end: {id:"40_1"}, properties:{startDate:date('2020-01-20')}}, {start: {id:"85_1"}, end: {id:"41_1"}, properties:{startDate:date('2020-01-29')}}, {start: {id:"86_1"}, end: {id:"30_1"}, properties:{startDate:date('2020-01-05')}}, {start: {id:"87_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-30')}}, {start: {id:"88_1"}, end: {id:"26_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"101_1"}, end: {id:"30_1"}, properties:{startDate:date('2020-01-08')}}, {start: {id:"89_1"}, end: {id:"45_1"}, properties:{startDate:date('2020-01-22')}}, {start: {id:"102_1"}, end: {id:"33_1"}, properties:{startDate:date('2020-01-28')}}, {start: {id:"90_1"}, end: {id:"47_1"}, properties:{startDate:date('2020-01-18')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"124_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"76_1"}, end: {id:"40_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"103_1"}, end: {id:"47_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"91_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-30')}}, {start: {id:"92_1"}, end: {id:"35_1"}, properties:{startDate:date('2020-01-21')}}, {start: {id:"77_1"}, end: {id:"37_1"}, properties:{startDate:date('2020-01-20')}}, {start: {id:"104_1"}, end: {id:"29_1"}, properties:{startDate:date('2020-01-12')}}, {start: {id:"125_1"}, end: {id:"39_1"}, properties:{startDate:date('2020-01-02')}}, {start: {id:"93_1"}, end: {id:"35_1"}, properties:{startDate:date('2020-01-17')}}, {start: {id:"116_1"}, end: {id:"41_1"}, properties:{startDate:date('2020-01-03')}}, {start: {id:"78_1"}, end: {id:"44_1"}, properties:{startDate:date('2020-01-21')}}, {start: {id:"105_1"}, end: {id:"42_1"}, properties:{startDate:date('2020-01-09')}}, {start: {id:"126_1"}, end: {id:"36_1"}, properties:{startDate:date('2020-01-05')}}, {start: {id:"94_1"}, end: {id:"30_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"117_1"}, end: {id:"47_1"}, properties:{startDate:date('2020-01-15')}}, {start: {id:"79_1"}, end: {id:"30_1"}, properties:{startDate:date('2020-01-17')}}, {start: {id:"106_1"}, end: {id:"47_1"}, properties:{startDate:date('2020-01-26')}}, {start: {id:"127_1"}, end: {id:"39_1"}, properties:{startDate:date('2020-01-26')}}, {start: {id:"107_1"}, end: {id:"29_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"118_1"}, end: {id:"43_1"}, properties:{startDate:date('2020-01-04')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"95_1"}, end: {id:"41_1"}, properties:{startDate:date('2020-01-27')}}, {start: {id:"128_1"}, end: {id:"37_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"80_1"}, end: {id:"32_1"}, properties:{startDate:date('2020-01-20')}}, {start: {id:"119_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-15')}}, {start: {id:"96_1"}, end: {id:"26_1"}, properties:{startDate:date('2020-01-13')}}, {start: {id:"129_1"}, end: {id:"44_1"}, properties:{startDate:date('2020-01-15')}}, {start: {id:"81_1"}, end: {id:"40_1"}, properties:{startDate:date('2020-01-30')}}, {start: {id:"120_1"}, end: {id:"35_1"}, properties:{startDate:date('2020-01-07')}}, {start: {id:"97_1"}, end: {id:"46_1"}, properties:{startDate:date('2020-01-05')}}, {start: {id:"130_1"}, end: {id:"35_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"82_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-17')}}, {start: {id:"121_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-06')}}, {start: {id:"98_1"}, end: {id:"44_1"}, properties:{startDate:date('2020-01-23')}}, {start: {id:"131_1"}, end: {id:"46_1"}, properties:{startDate:date('2020-01-10')}}, {start: {id:"83_1"}, end: {id:"32_1"}, properties:{startDate:date('2020-01-27')}}, {start: {id:"71_1"}, end: {id:"39_1"}, properties:{startDate:date('2020-01-17')}}, {start: {id:"99_1"}, end: {id:"32_1"}, properties:{startDate:date('2020-01-22')}}, {start: {id:"122_1"}, end: {id:"43_1"}, properties:{startDate:date('2020-01-20')}}, {start: {id:"72_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-15')}}, {start: {id:"123_1"}, end: {id:"40_1"}, properties:{startDate:date('2020-01-08')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"73_1"}, end: {id:"46_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"74_1"}, end: {id:"30_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"75_1"}, end: {id:"42_1"}, properties:{startDate:date('2020-01-30')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"146_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"96_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"114_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"100_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"130_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"106_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"97_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"147_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"131_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"101_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"107_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"98_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"132_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"148_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"102_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"108_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"133_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"149_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"99_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"103_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"109_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"150_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"134_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"104_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"12_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"110_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"135_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"105_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"111_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"136_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"122_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"112_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"137_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"113_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"123_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"138_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"139_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"124_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"115_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"140_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"125_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"141_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"116_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"126_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"142_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"117_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"127_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"143_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"118_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"128_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"144_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"145_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"119_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"129_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"120_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"121_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"88_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"80_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"89_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"81_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"90_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"82_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"91_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"83_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"92_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"84_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"93_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"85_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"94_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"86_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"95_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"87_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"21_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"71_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"72_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"23_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"73_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"74_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"75_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"76_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"77_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"78_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"79_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"20_1"}, end: {id:"8_1"}, properties:{startDate:date('2020-01-05')}}, {start: {id:"22_1"}, end: {id:"14_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"24_1"}, end: {id:"8_1"}, properties:{startDate:date('2020-01-08')}}, {start: {id:"25_1"}, end: {id:"6_1"}, properties:{startDate:date('2020-01-10')}}, {start: {id:"26_1"}, end: {id:"5_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"27_1"}, end: {id:"11_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"52_1"}, end: {id:"48_1"}, properties:{startDate:date('2020-01-17')}}, {start: {id:"28_1"}, end: {id:"9_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"53_1"}, end: {id:"35_1"}, properties:{startDate:date('2020-01-23')}}, {start: {id:"44_1"}, end: {id:"19_1"}, properties:{startDate:date('2020-01-15')}}, {start: {id:"29_1"}, end: {id:"9_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"30_1"}, end: {id:"16_1"}, properties:{startDate:date('2020-01-03')}}, {start: {id:"45_1"}, end: {id:"17_1"}, properties:{startDate:date('2020-01-23')}}, {start: {id:"54_1"}, end: {id:"32_1"}, properties:{startDate:date('2020-01-23')}}, {start: {id:"55_1"}, end: {id:"30_1"}, properties:{startDate:date('2020-01-21')}}, {start: {id:"31_1"}, end: {id:"14_1"}, properties:{startDate:date('2020-01-20')}}, {start: {id:"46_1"}, end: {id:"13_1"}, properties:{startDate:date('2020-01-11')}}, {start: {id:"32_1"}, end: {id:"17_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"47_1"}, end: {id:"14_1"}, properties:{startDate:date('2020-01-09')}}, {start: {id:"56_1"}, end: {id:"29_1"}, properties:{startDate:date('2020-01-14')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"57_1"}, end: {id:"29_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"48_1"}, end: {id:"18_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"33_1"}, end: {id:"9_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"49_1"}, end: {id:"10_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"34_1"}, end: {id:"19_1"}, properties:{startDate:date('2020-01-14')}}, {start: {id:"58_1"}, end: {id:"41_1"}, properties:{startDate:date('2020-01-23')}}, {start: {id:"50_1"}, end: {id:"13_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"35_1"}, end: {id:"10_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"59_1"}, end: {id:"30_1"}, properties:{startDate:date('2020-01-05')}}, {start: {id:"51_1"}, end: {id:"40_1"}, properties:{startDate:date('2020-01-30')}}, {start: {id:"60_1"}, end: {id:"33_1"}, properties:{startDate:date('2020-01-30')}}, {start: {id:"61_1"}, end: {id:"29_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"36_1"}, end: {id:"9_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"13_1"}, end: {id:"1_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"37_1"}, end: {id:"5_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"5_1"}, end: {id:"4_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"62_1"}, end: {id:"32_1"}, properties:{startDate:date('2020-01-07')}}, {start: {id:"14_1"}, end: {id:"2_1"}, properties:{startDate:date('2020-01-23')}}, {start: {id:"38_1"}, end: {id:"19_1"}, properties:{startDate:date('2020-01-12')}}, {start: {id:"6_1"}, end: {id:"1_1"}, properties:{startDate:date('2020-01-03')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"63_1"}, end: {id:"38_1"}, properties:{startDate:date('2020-01-16')}}, {start: {id:"15_1"}, end: {id:"3_1"}, properties:{startDate:date('2020-01-09')}}, {start: {id:"7_1"}, end: {id:"2_1"}, properties:{startDate:date('2020-01-11')}}, {start: {id:"39_1"}, end: {id:"10_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"64_1"}, end: {id:"41_1"}, properties:{startDate:date('2020-01-31')}}, {start: {id:"16_1"}, end: {id:"2_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"8_1"}, end: {id:"3_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"40_1"}, end: {id:"6_1"}, properties:{startDate:date('2020-01-03')}}, {start: {id:"65_1"}, end: {id:"40_1"}, properties:{startDate:date('2020-01-13')}}, {start: {id:"17_1"}, end: {id:"1_1"}, properties:{startDate:date('2020-01-27')}}, {start: {id:"9_1"}, end: {id:"4_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"41_1"}, end: {id:"17_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"66_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-18')}}, {start: {id:"18_1"}, end: {id:"4_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"42_1"}, end: {id:"18_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"10_1"}, end: {id:"4_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"19_1"}, end: {id:"1_1"}, properties:{startDate:date('2020-01-29')}}, {start: {id:"67_1"}, end: {id:"48_1"}, properties:{startDate:date('2020-01-26')}}, {start: {id:"43_1"}, end: {id:"11_1"}, properties:{startDate:date('2020-01-01')}}, {start: {id:"11_1"}, end: {id:"4_1"}, properties:{startDate:date('2020-01-01')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"68_1"}, end: {id:"28_1"}, properties:{startDate:date('2020-01-08')}}, {start: {id:"69_1"}, end: {id:"47_1"}, properties:{startDate:date('2020-01-26')}}, {start: {id:"70_1"}, end: {id:"36_1"}, properties:{startDate:date('2020-01-18')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"1_1"}, end: {id:"0_1"}, properties:{startDate:date('2020-01-15')}}, {start: {id:"2_1"}, end: {id:"0_1"}, properties:{startDate:date('2020-01-04')}}, {start: {id:"3_1"}, end: {id:"0_1"}, properties:{startDate:date('2020-01-29')}}, {start: {id:"4_1"}, end: {id:"0_1"}, properties:{startDate:date('2020-01-01')}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Client{id: row.end.id})
MERGE (start)-[r:HAS_SPONSOR]->(end) SET r += row.properties;
UNWIND [{start: {id:"8_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"9_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"10_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"11_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"48_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"49_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"13_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"50_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"14_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"51_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"15_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"52_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"1_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"53_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"54_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"2_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"55_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"3_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"56_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"4_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"57_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"5_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"58_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"6_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"59_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"7_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"60_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"24_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"61_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"25_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"62_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"26_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"63_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"27_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"40_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"28_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"41_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"29_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"42_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"30_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"43_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"31_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"64_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"32_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"44_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"16_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"65_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"33_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"45_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"17_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"66_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"34_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"46_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"67_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"18_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"35_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"47_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"19_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"68_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"36_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
UNWIND [{start: {id:"20_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"69_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"37_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"70_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"38_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"22_1"}, end: {brand:"ACME"}, properties:{}}, {start: {id:"39_1"}, end: {brand:"ACME"}, properties:{}}] AS row
MATCH (start:Client{id: row.start.id})
MATCH (end:Config{brand: row.end.brand})
MERGE (start)-[r:HAS_CONFIG]->(end) SET r += row.properties;
MATCH (n:`UNIQUE IMPORT LABEL`)  WITH n LIMIT 20000 REMOVE n:`UNIQUE IMPORT LABEL` REMOVE n.`UNIQUE IMPORT ID`;
DROP CONSTRAINT ON (node:`UNIQUE IMPORT LABEL`) ASSERT (node.`UNIQUE IMPORT ID`) IS UNIQUE;
